PlayerSpec{{
    /** Create a PlayerSpec */
    public PlayerSpec create(String n, String add, int p){
        return new PlayerSpec(n,add,p);
    }

    /** Change the Address of this Player */
    public PlayerSpec changeAddress(String add){ return create(name,add,port); }
    
    
    /** Returns a Predicate that compares another PlayerSpec by name */
    public List.Pred<PlayerSpec> sameNamePred(){ return new SameName(); }
    /** Predicate for PlayerSpecs that compares Names */
    private class SameName extends List.Pred<PlayerSpec>{
        public boolean huh(PlayerSpec that)
        { return name.equals(that.name); }
    }
}}
PlayersFile{{
    /** Get the List of PlayerSpecs */
    public List<PlayerSpec> getPlayerSpecs(){ return players; }
}}
PasswordEntry{{
    /** Add to the given Map */
    public Map<String,String> addTo(Map<String,String> m){
        return m.put(name,passhash);
    }
}}
PasswordFile{{
    /** Get a Map of Player-Name / Password-Hash */
    public Map<String,String> getPasswordMap(){
        return passwds.fold(new List.Fold<PasswordEntry,Map<String,String>>(){
            public Map<String,String> fold(PasswordEntry e, Map<String,String> m){
                return e.addTo(m);
            }
        }, Map.<String,String>create());
    }
    /** Write out the Passwords to a File */
    public void write(String file) throws IOException{
        PrintStream out = new PrintStream(new FileOutputStream(file));
        out.println(this.toString());
        out.close();
    }
}}

TeamSpec{{
    /** Create a Team Spec from a Few Strings. THe String <tt>members</tt> should
     *    be a semi-colon separated list of member names. */
    public static TeamSpec create(String name, String pass, String members){
        return new TeamSpec(name, scg.Util.encrypt(pass),
                            List.create(members.split(";")).map(new List.Map<String,String>(){
                                public String map(String s){ return s.trim(); }
                            }));
    }
    /** Returns a Predicate that compares another TeamSpec by name */
    public List.Pred<TeamSpec> sameNamePred(){ return new SameName(); }
    /** Predicate for TeamSpecs that compares Names */
    private class SameName extends List.Pred<TeamSpec>{
        public boolean huh(TeamSpec that)
        { return name.equals(that.name); }
    }
}}
TeamFile{{
    /** Write out the Teams to a File */
    public void write(String file) throws IOException{
        PrintStream out = new PrintStream(new FileOutputStream(file));
        out.println(this.toString());
        out.close();
    }
}}

Round{{}}





