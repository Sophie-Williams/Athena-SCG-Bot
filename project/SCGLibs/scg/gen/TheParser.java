/* Generated By:JavaCC: Do not edit this line. TheParser.java */
package scg.gen;

import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import scg.Util;
import scg.game.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import scg.Util;
import scg.game.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.evergreen.ir.RelationCore;
import edu.neu.ccs.demeterf.control.Fields;
import edu.neu.ccs.demeterf.lib.ident;
import edu.neu.ccs.demeterf.lib.verbatim;

  class TheParser implements TheParserConstants {

   public static String unescape(String str){
      String retval = "";
      int index = 0;
      char ch, ch1;
      int ordinal = 0;
      while (index < str.length()) {
         if(str.charAt(index) != '\\') { retval += str.charAt(index++); continue; }
         ch = str.charAt(++index);
         if(ch == 'b') { retval += '\b'; index++; continue; }
         if(ch == 't') { retval += '\t'; index++; continue; }
         if(ch == 'n') { retval += '\n'; index++; continue; }
         if(ch == 'f') { retval += '\f'; index++; continue; }
         if(ch == 'r') { retval += '\r'; index++; continue; }
         if(ch == '"') { retval += '\"'; index++; continue; }
         if(ch == '\'') { retval += '\''; index++; continue; }
         if(ch == '\\') { retval += '\\'; index++; continue; }
         if(ch >= '0' && ch <= '7'){
            ordinal = ((int)ch) - ((int)'0'); index++;
            ch1 = str.charAt(index);
            if(ch1 >= '0' && ch1 <= '7'){
               ordinal = ordinal*8 + ((int)ch1) - ((int)'0'); index++;
               ch1 = str.charAt(index);
               if(ch <= '3' && ch1 >= '0' && ch1 <= '7'){
                  ordinal = ordinal*8 + ((int)ch1) - ((int)'0'); index++;
               }
            }
            retval += (char)ordinal;
            continue;
         }
         if(ch == 'u'){
            ordinal = 0;
            for(int i = 0; i < 4; i++){
               index++; ch = str.charAt(index);
               ordinal = ordinal*16+hexval(ch);
            }
            index++;
            retval += (char)ordinal;
            continue;
         }
      }
      return retval;
   }
   static int hexval(char c){
      int r = "0123456789ABCDEF".indexOf(Character.toUpperCase(c));
      if(r >= 0)return r;
      throw new RuntimeException(" ** Bad Escaped Character");
   }

  final public byte parse_byte() throws ParseException {
                    int i;
    i = parse_int();
                      {if (true) return (byte)i;}
    throw new Error("Missing return statement in function");
  }

  final public Byte parse_Byte() throws ParseException {
                    byte b;
    b = parse_byte();
                       {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public short parse_short() throws ParseException {
                      int i;
    i = parse_int();
                      {if (true) return (short)i;}
    throw new Error("Missing return statement in function");
  }

  final public Short parse_Short() throws ParseException {
                      short s;
    s = parse_short();
                        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public int parse_int() throws ParseException {
                  Token t;
    t = jj_consume_token(INT);
      if(t.image.length() > 1 && Character.toLowerCase(t.image.charAt(1)) == 'x')
          {if (true) return Integer.parseInt(t.image.substring(2), 16);}
      {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Integer parse_Integer() throws ParseException {
                          int i;
    i = parse_int();
                      {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public long parse_long() throws ParseException {
                    Token t;
    t = jj_consume_token(INT);
      if(t.image.length() > 1 && Character.toLowerCase(t.image.charAt(1)) == 'x')
          {if (true) return Long.parseLong(t.image.substring(2), 16);}
    {if (true) return Long.parseLong(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Long parse_Long() throws ParseException {
                    long l;
    l = parse_long();
                       {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public double parse_double() throws ParseException {
                        Token t;
    t = jj_consume_token(DOUBLE);
      {if (true) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Double parse_Double() throws ParseException {
                        double d;
    d = parse_double();
                         {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public float parse_float() throws ParseException {
                      Token t;
    t = jj_consume_token(DOUBLE);
      {if (true) return Float.parseFloat(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Float parse_Float() throws ParseException {
                      float f;
    f = parse_float();
                        {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public String parse_String() throws ParseException {
                        Token t;
    t = jj_consume_token(STRING);
      {if (true) return unescape(t.image.substring(1,t.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  final public boolean parse_boolean() throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                 {if (true) return true;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                  {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Boolean parse_Boolean() throws ParseException {
                          boolean b;
    b = parse_boolean();
                          {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public char parse_char() throws ParseException {
                    Token t;
    t = jj_consume_token(CHAR);
      {if (true) return unescape(t.image.substring(1,t.image.length()-1)).charAt(0);}
    throw new Error("Missing return statement in function");
  }

  final public Character parse_Character() throws ParseException {
                              char c;
    c = parse_char();
                       {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ident parse_ident() throws ParseException {
                      Token t;
    t = jj_consume_token(IDENT);
      {if (true) return new ident(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public verbatim parse_verbatim() throws ParseException {
                            Token t;
    t = jj_consume_token(TEXT);
      {if (true) return new verbatim(t.image.substring(2,t.image.length()-2));}
    throw new Error("Missing return statement in function");
  }

  final public Problem parse_Problem() throws ParseException {
     List<Var> vars;
     List<Clause> clauses;
    vars = parse_List$Var$();
    clauses = parse_List$Clause$();
      {if (true) return new Problem(vars,clauses);}
    throw new Error("Missing return statement in function");
  }

  final public Clause parse_Clause() throws ParseException {
     int relnum;
     List<Var> vars;
    jj_consume_token(1);
    relnum = parse_int();
    vars = parse_List$Var$();
    jj_consume_token(2);
      {if (true) return new Clause(relnum,vars);}
    throw new Error("Missing return statement in function");
  }

  final public ProblemType parse_ProblemType() throws ParseException {
     List<Integer> type;
    jj_consume_token(1);
    type = parse_List$Integer$();
    jj_consume_token(2);
      {if (true) return new ProblemType(type);}
    throw new Error("Missing return statement in function");
  }

  final public Objective parse_Objective() throws ParseException {
    jj_consume_token(3);
      {if (true) return new Objective();}
    throw new Error("Missing return statement in function");
  }

  final public Predicate parse_Predicate() throws ParseException {
    jj_consume_token(3);
      {if (true) return new Predicate();}
    throw new Error("Missing return statement in function");
  }

  final public RBColor parse_RBColor() throws ParseException {
    RBColor sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      sup = parse_RED();
                        {if (true) return sup;}
      break;
    case 5:
      sup = parse_BLACK();
                          {if (true) return sup;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RED parse_RED() throws ParseException {
    jj_consume_token(4);
      {if (true) return new RED();}
    throw new Error("Missing return statement in function");
  }

  final public BLACK parse_BLACK() throws ParseException {
    jj_consume_token(5);
      {if (true) return new BLACK();}
    throw new Error("Missing return statement in function");
  }

  final public PlayerID parse_PlayerID() throws ParseException {
     int id;
    id = parse_int();
      {if (true) return new PlayerID(id);}
    throw new Error("Missing return statement in function");
  }

  final public Var parse_Var() throws ParseException {
     ident id;
    id = parse_ident();
      {if (true) return new Var(id);}
    throw new Error("Missing return statement in function");
  }

  final public Solution parse_Solution() throws ParseException {
     Map<Var,Boolean> assign;
    assign = parse_Map$Var$Boolean$();
      {if (true) return new Solution(assign);}
    throw new Error("Missing return statement in function");
  }

  final public Challenge parse_Challenge() throws ParseException {
    Challenge sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      sup = parse_OfferedChallenge();
                                     {if (true) return sup;}
      break;
    case 8:
      sup = parse_AcceptedChallenge();
                                      {if (true) return sup;}
      break;
    case 9:
      sup = parse_ProvidedChallenge();
                                      {if (true) return sup;}
      break;
    case 10:
      sup = parse_SolvedChallenge();
                                    {if (true) return sup;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OfferedChallenge parse_OfferedChallenge() throws ParseException {
     int key;
     PlayerID challenger;
     ProblemType pred;
     double price;
    jj_consume_token(6);
    key = parse_int();
    challenger = parse_PlayerID();
    pred = parse_ProblemType();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new OfferedChallenge(key,challenger,pred,price);}
    throw new Error("Missing return statement in function");
  }

  final public AcceptedChallenge parse_AcceptedChallenge() throws ParseException {
     PlayerID challengee;
     int key;
     PlayerID challenger;
     ProblemType pred;
     double price;
    jj_consume_token(8);
    challengee = parse_PlayerID();
    key = parse_int();
    challenger = parse_PlayerID();
    pred = parse_ProblemType();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new AcceptedChallenge(challengee,key,challenger,pred,price);}
    throw new Error("Missing return statement in function");
  }

  final public ProvidedChallenge parse_ProvidedChallenge() throws ParseException {
     PlayerID challengee;
     Problem instance;
     int key;
     PlayerID challenger;
     ProblemType pred;
     double price;
    jj_consume_token(9);
    challengee = parse_PlayerID();
    instance = parse_Problem();
    key = parse_int();
    challenger = parse_PlayerID();
    pred = parse_ProblemType();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new ProvidedChallenge(challengee,instance,key,challenger,pred,price);}
    throw new Error("Missing return statement in function");
  }

  final public SolvedChallenge parse_SolvedChallenge() throws ParseException {
     PlayerID challengee;
     Problem instance;
     Solution solution;
     int key;
     PlayerID challenger;
     ProblemType pred;
     double price;
    jj_consume_token(10);
    challengee = parse_PlayerID();
    instance = parse_Problem();
    solution = parse_Solution();
    key = parse_int();
    challenger = parse_PlayerID();
    pred = parse_ProblemType();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new SolvedChallenge(challengee,instance,solution,key,challenger,pred,price);}
    throw new Error("Missing return statement in function");
  }

  final public Transaction parse_Transaction() throws ParseException {
    Transaction sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      sup = parse_OfferTrans();
                               {if (true) return sup;}
      break;
    case 12:
      sup = parse_AcceptTrans();
                                {if (true) return sup;}
      break;
    case 15:
      sup = parse_ReofferTrans();
                                 {if (true) return sup;}
      break;
    case 13:
      sup = parse_ProvideTrans();
                                 {if (true) return sup;}
      break;
    case 14:
      sup = parse_SolveTrans();
                               {if (true) return sup;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OfferTrans parse_OfferTrans() throws ParseException {
     ProblemType pred;
     double price;
    jj_consume_token(11);
    pred = parse_ProblemType();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new OfferTrans(pred,price);}
    throw new Error("Missing return statement in function");
  }

  final public AcceptTrans parse_AcceptTrans() throws ParseException {
     int challengeid;
    jj_consume_token(12);
    challengeid = parse_int();
    jj_consume_token(7);
      {if (true) return new AcceptTrans(challengeid);}
    throw new Error("Missing return statement in function");
  }

  final public ProvideTrans parse_ProvideTrans() throws ParseException {
     Problem inst;
     int challengeid;
    jj_consume_token(13);
    inst = parse_Problem();
    challengeid = parse_int();
    jj_consume_token(7);
      {if (true) return new ProvideTrans(inst,challengeid);}
    throw new Error("Missing return statement in function");
  }

  final public SolveTrans parse_SolveTrans() throws ParseException {
     Solution sol;
     int challengeid;
    jj_consume_token(14);
    sol = parse_Solution();
    challengeid = parse_int();
    jj_consume_token(7);
      {if (true) return new SolveTrans(sol,challengeid);}
    throw new Error("Missing return statement in function");
  }

  final public ReofferTrans parse_ReofferTrans() throws ParseException {
     int challengeid;
     double price;
    jj_consume_token(15);
    challengeid = parse_int();
    price = parse_double();
    jj_consume_token(7);
      {if (true) return new ReofferTrans(challengeid,price);}
    throw new Error("Missing return statement in function");
  }

  final public PlayerTrans parse_PlayerTrans() throws ParseException {
     PlayerID id;
     List<Transaction> ts;
    jj_consume_token(16);
    id = parse_PlayerID();
    ts = parse_List$Transaction$();
    jj_consume_token(7);
      {if (true) return new PlayerTrans(id,ts);}
    throw new Error("Missing return statement in function");
  }

  final public Config parse_Config() throws ParseException {
     String gamekind;
     int turndur;
     double mindecr;
     double initacc;
     Objective objective;
     Predicate predicate;
     int numrounds;
     double profitFactor;
     int otrounds;
    jj_consume_token(17);
    jj_consume_token(18);
    gamekind = parse_String();
    jj_consume_token(19);
    turndur = parse_int();
    jj_consume_token(20);
    mindecr = parse_double();
    jj_consume_token(21);
    initacc = parse_double();
    jj_consume_token(22);
    objective = parse_Objective();
    jj_consume_token(23);
    predicate = parse_Predicate();
    jj_consume_token(24);
    numrounds = parse_int();
    jj_consume_token(25);
    profitFactor = parse_double();
    jj_consume_token(26);
    otrounds = parse_int();
    jj_consume_token(7);
      {if (true) return new Config(gamekind,turndur,mindecr,initacc,objective,predicate,numrounds,profitFactor,otrounds);}
    throw new Error("Missing return statement in function");
  }

  final public PlayerContext parse_PlayerContext() throws ParseException {
     Config config;
     PlayerID id;
     double balance;
     int currentRound;
     List<OfferedChallenge> ourOffered;
     List<OfferedChallenge> theirOffered;
     List<AcceptedChallenge> accepted;
     List<ProvidedChallenge> provided;
    jj_consume_token(27);
    config = parse_Config();
    id = parse_PlayerID();
    balance = parse_double();
    currentRound = parse_int();
    jj_consume_token(1);
    ourOffered = parse_List$OfferedChallenge$();
    jj_consume_token(2);
    jj_consume_token(1);
    theirOffered = parse_List$OfferedChallenge$();
    jj_consume_token(2);
    jj_consume_token(1);
    accepted = parse_List$AcceptedChallenge$();
    jj_consume_token(2);
    jj_consume_token(1);
    provided = parse_List$ProvidedChallenge$();
    jj_consume_token(2);
    jj_consume_token(7);
    jj_consume_token(0);
      {if (true) return new PlayerContext(config,id,balance,currentRound,ourOffered,theirOffered,accepted,provided);}
    throw new Error("Missing return statement in function");
  }

  final public PlayerSpec parse_PlayerSpec() throws ParseException {
     String name;
     String address;
     int port;
    jj_consume_token(28);
    name = parse_String();
    address = parse_String();
    port = parse_int();
    jj_consume_token(7);
      {if (true) return new PlayerSpec(name,address,port);}
    throw new Error("Missing return statement in function");
  }

  final public PlayersFile parse_PlayersFile() throws ParseException {
     List<PlayerSpec> players;
    players = parse_List$PlayerSpec$();
    jj_consume_token(0);
      {if (true) return new PlayersFile(players);}
    throw new Error("Missing return statement in function");
  }

  final public PasswordEntry parse_PasswordEntry() throws ParseException {
     String name;
     String passhash;
    jj_consume_token(29);
    name = parse_String();
    passhash = parse_String();
    jj_consume_token(7);
      {if (true) return new PasswordEntry(name,passhash);}
    throw new Error("Missing return statement in function");
  }

  final public PasswordFile parse_PasswordFile() throws ParseException {
     List<PasswordEntry> passwds;
    passwds = parse_List$PasswordEntry$();
    jj_consume_token(0);
      {if (true) return new PasswordFile(passwds);}
    throw new Error("Missing return statement in function");
  }

  final public TeamSpec parse_TeamSpec() throws ParseException {
     String name;
     String passhash;
     List<String> players;
    jj_consume_token(30);
    name = parse_String();
    passhash = parse_String();
    players = parse_List$String$();
    jj_consume_token(7);
      {if (true) return new TeamSpec(name,passhash,players);}
    throw new Error("Missing return statement in function");
  }

  final public TeamFile parse_TeamFile() throws ParseException {
     List<TeamSpec> teams;
    teams = parse_List$TeamSpec$();
    jj_consume_token(0);
      {if (true) return new TeamFile(teams);}
    throw new Error("Missing return statement in function");
  }

  final public History parse_History() throws ParseException {
     Header header;
     List<Round> rounds;
    header = parse_Header();
    rounds = parse_List$Round$();
      {if (true) return new History(header,rounds);}
    throw new Error("Missing return statement in function");
  }

  final public Header parse_Header() throws ParseException {
     Map<PlayerID,PlayerSpec> players;
    players = parse_Map$PlayerID$PlayerSpec$();
      {if (true) return new Header(players);}
    throw new Error("Missing return statement in function");
  }

  final public Round parse_Round() throws ParseException {
     int num;
     List<Event> trans;
    jj_consume_token(31);
    num = parse_int();
    trans = parse_List$Event$();
    jj_consume_token(7);
      {if (true) return new Round(num,trans);}
    throw new Error("Missing return statement in function");
  }

  final public Event parse_Event() throws ParseException {
    Event sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      sup = parse_PlayerTrans();
                                {if (true) return sup;}
      break;
    case 32:
      sup = parse_PlayerKickedEvent();
                                      {if (true) return sup;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PlayerKickedEvent parse_PlayerKickedEvent() throws ParseException {
     PlayerSpec spec;
     String msg;
     String time;
    jj_consume_token(32);
    spec = parse_PlayerSpec();
    msg = parse_String();
    time = parse_String();
    jj_consume_token(7);
      {if (true) return new PlayerKickedEvent(spec,msg,time);}
    throw new Error("Missing return statement in function");
  }

  final public List<Event> parse_List$Event$() throws ParseException {
    List<Event> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 32:
      sup = parse_Cons$Event$();
                                {if (true) return sup;}
      break;
    default:
      jj_la1[5] = jj_gen;
      sup = parse_Empty$Event$();
                                 {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Event> parse_Empty$Event$() throws ParseException {
      {if (true) return new Empty<Event>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Event> parse_Cons$Event$() throws ParseException {
     Event first;
     List<Event> rest;
    first = parse_Event();
    rest = parse_List$Event$();
      {if (true) return new Cons<Event>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public Map<PlayerID,PlayerSpec> parse_Map$PlayerID$PlayerSpec$() throws ParseException {
     RBTree<Entry<PlayerID,PlayerSpec>> tree;
    jj_consume_token(33);
    tree = parse_RBTree$Entry$PlayerID$PlayerSpec$$();
    jj_consume_token(7);
      {if (true) return new Map<PlayerID,PlayerSpec>(tree);}
    throw new Error("Missing return statement in function");
  }

  final public RBTree<Entry<PlayerID,PlayerSpec>> parse_RBTree$Entry$PlayerID$PlayerSpec$$() throws ParseException {
    RBTree<Entry<PlayerID,PlayerSpec>> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      sup = parse_RBNode$Entry$PlayerID$PlayerSpec$$();
                                                       {if (true) return sup;}
      break;
    default:
      jj_la1[6] = jj_gen;
      sup = parse_RBLeaf$Entry$PlayerID$PlayerSpec$$();
                                                       {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public RBLeaf<Entry<PlayerID,PlayerSpec>> parse_RBLeaf$Entry$PlayerID$PlayerSpec$$() throws ParseException {
      {if (true) return new RBLeaf<Entry<PlayerID,PlayerSpec>>();}
    throw new Error("Missing return statement in function");
  }

  final public RBNode<Entry<PlayerID,PlayerSpec>> parse_RBNode$Entry$PlayerID$PlayerSpec$$() throws ParseException {
     RBColor color;
     Entry<PlayerID,PlayerSpec> data;
     RBTree<Entry<PlayerID,PlayerSpec>> left;
     RBTree<Entry<PlayerID,PlayerSpec>> right;
    jj_consume_token(34);
    color = parse_RBColor();
    data = parse_Entry$PlayerID$PlayerSpec$();
    left = parse_RBTree$Entry$PlayerID$PlayerSpec$$();
    right = parse_RBTree$Entry$PlayerID$PlayerSpec$$();
    jj_consume_token(2);
      {if (true) return new RBNode<Entry<PlayerID,PlayerSpec>>(color,data,left,right);}
    throw new Error("Missing return statement in function");
  }

  final public Entry<PlayerID,PlayerSpec> parse_Entry$PlayerID$PlayerSpec$() throws ParseException {
     PlayerID key;
     PlayerSpec val;
    jj_consume_token(1);
    key = parse_PlayerID();
    jj_consume_token(35);
    val = parse_PlayerSpec();
    jj_consume_token(2);
      {if (true) return new Entry<PlayerID,PlayerSpec>(key,val);}
    throw new Error("Missing return statement in function");
  }

  final public List<Round> parse_List$Round$() throws ParseException {
    List<Round> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      sup = parse_Cons$Round$();
                                {if (true) return sup;}
      break;
    default:
      jj_la1[7] = jj_gen;
      sup = parse_Empty$Round$();
                                 {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Round> parse_Empty$Round$() throws ParseException {
      {if (true) return new Empty<Round>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Round> parse_Cons$Round$() throws ParseException {
     Round first;
     List<Round> rest;
    first = parse_Round();
    rest = parse_List$Round$();
      {if (true) return new Cons<Round>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<TeamSpec> parse_List$TeamSpec$() throws ParseException {
    List<TeamSpec> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      sup = parse_Cons$TeamSpec$();
                                   {if (true) return sup;}
      break;
    default:
      jj_la1[8] = jj_gen;
      sup = parse_Empty$TeamSpec$();
                                    {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<TeamSpec> parse_Empty$TeamSpec$() throws ParseException {
      {if (true) return new Empty<TeamSpec>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<TeamSpec> parse_Cons$TeamSpec$() throws ParseException {
     TeamSpec first;
     List<TeamSpec> rest;
    first = parse_TeamSpec();
    rest = parse_List$TeamSpec$();
      {if (true) return new Cons<TeamSpec>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<String> parse_List$String$() throws ParseException {
    List<String> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      sup = parse_Cons$String$();
                                 {if (true) return sup;}
      break;
    default:
      jj_la1[9] = jj_gen;
      sup = parse_Empty$String$();
                                  {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<String> parse_Empty$String$() throws ParseException {
      {if (true) return new Empty<String>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<String> parse_Cons$String$() throws ParseException {
     String first;
     List<String> rest;
    first = parse_String();
    rest = parse_List$String$();
      {if (true) return new Cons<String>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<PasswordEntry> parse_List$PasswordEntry$() throws ParseException {
    List<PasswordEntry> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      sup = parse_Cons$PasswordEntry$();
                                        {if (true) return sup;}
      break;
    default:
      jj_la1[10] = jj_gen;
      sup = parse_Empty$PasswordEntry$();
                                         {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<PasswordEntry> parse_Empty$PasswordEntry$() throws ParseException {
      {if (true) return new Empty<PasswordEntry>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<PasswordEntry> parse_Cons$PasswordEntry$() throws ParseException {
     PasswordEntry first;
     List<PasswordEntry> rest;
    first = parse_PasswordEntry();
    rest = parse_List$PasswordEntry$();
      {if (true) return new Cons<PasswordEntry>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<PlayerSpec> parse_List$PlayerSpec$() throws ParseException {
    List<PlayerSpec> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      sup = parse_Cons$PlayerSpec$();
                                     {if (true) return sup;}
      break;
    default:
      jj_la1[11] = jj_gen;
      sup = parse_Empty$PlayerSpec$();
                                      {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<PlayerSpec> parse_Empty$PlayerSpec$() throws ParseException {
      {if (true) return new Empty<PlayerSpec>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<PlayerSpec> parse_Cons$PlayerSpec$() throws ParseException {
     PlayerSpec first;
     List<PlayerSpec> rest;
    first = parse_PlayerSpec();
    rest = parse_List$PlayerSpec$();
      {if (true) return new Cons<PlayerSpec>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<ProvidedChallenge> parse_List$ProvidedChallenge$() throws ParseException {
    List<ProvidedChallenge> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      sup = parse_Cons$ProvidedChallenge$();
                                            {if (true) return sup;}
      break;
    default:
      jj_la1[12] = jj_gen;
      sup = parse_Empty$ProvidedChallenge$();
                                             {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<ProvidedChallenge> parse_Empty$ProvidedChallenge$() throws ParseException {
      {if (true) return new Empty<ProvidedChallenge>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<ProvidedChallenge> parse_Cons$ProvidedChallenge$() throws ParseException {
     ProvidedChallenge first;
     List<ProvidedChallenge> rest;
    first = parse_ProvidedChallenge();
    rest = parse_List$ProvidedChallenge$();
      {if (true) return new Cons<ProvidedChallenge>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<AcceptedChallenge> parse_List$AcceptedChallenge$() throws ParseException {
    List<AcceptedChallenge> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      sup = parse_Cons$AcceptedChallenge$();
                                            {if (true) return sup;}
      break;
    default:
      jj_la1[13] = jj_gen;
      sup = parse_Empty$AcceptedChallenge$();
                                             {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<AcceptedChallenge> parse_Empty$AcceptedChallenge$() throws ParseException {
      {if (true) return new Empty<AcceptedChallenge>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<AcceptedChallenge> parse_Cons$AcceptedChallenge$() throws ParseException {
     AcceptedChallenge first;
     List<AcceptedChallenge> rest;
    first = parse_AcceptedChallenge();
    rest = parse_List$AcceptedChallenge$();
      {if (true) return new Cons<AcceptedChallenge>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<OfferedChallenge> parse_List$OfferedChallenge$() throws ParseException {
    List<OfferedChallenge> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      sup = parse_Cons$OfferedChallenge$();
                                           {if (true) return sup;}
      break;
    default:
      jj_la1[14] = jj_gen;
      sup = parse_Empty$OfferedChallenge$();
                                            {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<OfferedChallenge> parse_Empty$OfferedChallenge$() throws ParseException {
      {if (true) return new Empty<OfferedChallenge>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<OfferedChallenge> parse_Cons$OfferedChallenge$() throws ParseException {
     OfferedChallenge first;
     List<OfferedChallenge> rest;
    first = parse_OfferedChallenge();
    rest = parse_List$OfferedChallenge$();
      {if (true) return new Cons<OfferedChallenge>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<Transaction> parse_List$Transaction$() throws ParseException {
    List<Transaction> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      sup = parse_Cons$Transaction$();
                                      {if (true) return sup;}
      break;
    default:
      jj_la1[15] = jj_gen;
      sup = parse_Empty$Transaction$();
                                       {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Transaction> parse_Empty$Transaction$() throws ParseException {
      {if (true) return new Empty<Transaction>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Transaction> parse_Cons$Transaction$() throws ParseException {
     Transaction first;
     List<Transaction> rest;
    first = parse_Transaction();
    rest = parse_List$Transaction$();
      {if (true) return new Cons<Transaction>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public Map<Var,Boolean> parse_Map$Var$Boolean$() throws ParseException {
     RBTree<Entry<Var,Boolean>> tree;
    jj_consume_token(33);
    tree = parse_RBTree$Entry$Var$Boolean$$();
    jj_consume_token(7);
      {if (true) return new Map<Var,Boolean>(tree);}
    throw new Error("Missing return statement in function");
  }

  final public RBTree<Entry<Var,Boolean>> parse_RBTree$Entry$Var$Boolean$$() throws ParseException {
    RBTree<Entry<Var,Boolean>> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      sup = parse_RBNode$Entry$Var$Boolean$$();
                                               {if (true) return sup;}
      break;
    default:
      jj_la1[16] = jj_gen;
      sup = parse_RBLeaf$Entry$Var$Boolean$$();
                                               {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public RBLeaf<Entry<Var,Boolean>> parse_RBLeaf$Entry$Var$Boolean$$() throws ParseException {
      {if (true) return new RBLeaf<Entry<Var,Boolean>>();}
    throw new Error("Missing return statement in function");
  }

  final public RBNode<Entry<Var,Boolean>> parse_RBNode$Entry$Var$Boolean$$() throws ParseException {
     RBColor color;
     Entry<Var,Boolean> data;
     RBTree<Entry<Var,Boolean>> left;
     RBTree<Entry<Var,Boolean>> right;
    jj_consume_token(34);
    color = parse_RBColor();
    data = parse_Entry$Var$Boolean$();
    left = parse_RBTree$Entry$Var$Boolean$$();
    right = parse_RBTree$Entry$Var$Boolean$$();
    jj_consume_token(2);
      {if (true) return new RBNode<Entry<Var,Boolean>>(color,data,left,right);}
    throw new Error("Missing return statement in function");
  }

  final public Entry<Var,Boolean> parse_Entry$Var$Boolean$() throws ParseException {
     Var key;
     Boolean val;
    jj_consume_token(1);
    key = parse_Var();
    jj_consume_token(35);
    val = parse_Boolean();
    jj_consume_token(2);
      {if (true) return new Entry<Var,Boolean>(key,val);}
    throw new Error("Missing return statement in function");
  }

  final public List<Integer> parse_List$Integer$() throws ParseException {
    List<Integer> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      sup = parse_Cons$Integer$();
                                  {if (true) return sup;}
      break;
    default:
      jj_la1[17] = jj_gen;
      sup = parse_Empty$Integer$();
                                   {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Integer> parse_Empty$Integer$() throws ParseException {
      {if (true) return new Empty<Integer>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Integer> parse_Cons$Integer$() throws ParseException {
     Integer first;
     List<Integer> rest;
    first = parse_Integer();
    rest = parse_List$Integer$();
      {if (true) return new Cons<Integer>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<Var> parse_List$Var$() throws ParseException {
    List<Var> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      sup = parse_Cons$Var$();
                              {if (true) return sup;}
      break;
    default:
      jj_la1[18] = jj_gen;
      sup = parse_Empty$Var$();
                               {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Var> parse_Empty$Var$() throws ParseException {
      {if (true) return new Empty<Var>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Var> parse_Cons$Var$() throws ParseException {
     Var first;
     List<Var> rest;
    first = parse_Var();
    rest = parse_List$Var$();
      {if (true) return new Cons<Var>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  final public List<Clause> parse_List$Clause$() throws ParseException {
    List<Clause> sup = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      sup = parse_Cons$Clause$();
                                 {if (true) return sup;}
      break;
    default:
      jj_la1[19] = jj_gen;
      sup = parse_Empty$Clause$();
                                  {if (true) return sup;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Empty<Clause> parse_Empty$Clause$() throws ParseException {
      {if (true) return new Empty<Clause>();}
    throw new Error("Missing return statement in function");
  }

  final public Cons<Clause> parse_Cons$Clause$() throws ParseException {
     Clause first;
     List<Clause> rest;
    first = parse_Clause();
    rest = parse_List$Clause$();
      {if (true) return new Cons<Clause>(first,rest);}
    throw new Error("Missing return statement in function");
  }

  public TheParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x30,0x740,0xf800,0x10000,0x10000,0x0,0x80000000,0x40000000,0x0,0x20000000,0x10000000,0x200,0x100,0x40,0xf800,0x0,0x0,0x0,0x2,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1800,0x0,0x0,0x0,0x1,0x1,0x4,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x2000,0x80000,0x0,};
   }

  public TheParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public TheParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  public TheParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  public TheParser(TheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  public void ReInit(TheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[52];
    for (int i = 0; i < 52; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  }
