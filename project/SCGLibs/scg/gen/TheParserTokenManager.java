/* Generated By:JavaCC: Do not edit this line. TheParserTokenManager.java */
package scg.gen;
import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import scg.Util;
import scg.game.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import scg.Util;
import scg.game.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.evergreen.ir.RelationCore;
import edu.neu.ccs.demeterf.control.Fields;
import edu.neu.ccs.demeterf.lib.ident;
import edu.neu.ccs.demeterf.lib.verbatim;

public class TheParserTokenManager implements TheParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0L)
            return 57;
         if ((active0 & 0x1801ffffff70L) != 0L)
         {
            jjmatchedKind = 51;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0x1801ffffff70L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 43;
         }
         return -1;
      case 2:
         if ((active0 & 0x10L) != 0L)
            return 43;
         if ((active0 & 0x1801ffffff60L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 43;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000000000L) != 0L)
            return 43;
         if ((active0 & 0x1001ffffff60L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x1bfffff40L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x100000000020L) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0x13fffb740L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 43;
         }
         return -1;
      case 6:
         if ((active0 & 0x1ffda340L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 43;
         }
         return -1;
      case 7:
         if ((active0 & 0x17dd0300L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
            return 43;
         }
         return -1;
      case 8:
         if ((active0 & 0x13d90000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
            return 43;
         }
         return -1;
      case 9:
         if ((active0 & 0x12190000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      case 10:
         if ((active0 & 0x2190000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 10;
            return 43;
         }
         return -1;
      case 11:
         if ((active0 & 0x2180000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 11;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 40:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 41:
         return jjStopAtPos(0, 2);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 91:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 93:
         return jjStopAtPos(0, 7);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8020000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4400840L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x32812200L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80008010L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4400L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80040080000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 93:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100020040000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40008010L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x840L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10010020L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x88024400L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80002802200L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x50010020L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100001100L);
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 43);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x840L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000004400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8120000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200a200L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400900000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x441940L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x2028000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100020000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x6600L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x10010000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x118114400L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2822200L);
      case 107:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x840L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0xb00000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x120002600L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8040L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10010000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2401100L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1080000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000040L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2300L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1040000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x188000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(7, 21);
         break;
      case 91:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(7, 6);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2080000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1040300L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(8, 18);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      case 91:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(8, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(8, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10c00000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 24);
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x2080000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(11, 16);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(12, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 36)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjAddStates(8, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(13);
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39 && kind > 48)
                     kind = 48;
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 19);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 30:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 36:
                  jjCheckNAddStates(14, 16);
                  break;
               case 38:
                  jjCheckNAddStates(17, 19);
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 45:
                  if (curChar == 47)
                     jjCheckNAddStates(20, 22);
                  break;
               case 46:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 47:
               case 48:
                  if (curChar == 10 && kind > 41)
                     kind = 41;
                  break;
               case 49:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 42)
                     jjAddStates(23, 24);
                  break;
               case 53:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 52);
                  break;
               case 54:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 52);
                  break;
               case 55:
                  if (curChar == 47 && kind > 42)
                     kind = 42;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 3:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(4);
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(29, 31);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 35:
                  if (curChar == 123)
                     jjCheckNAddStates(14, 16);
                  break;
               case 36:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 37:
                  if (curChar == 125)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 39:
                  if (curChar == 125 && kind > 50)
                     kind = 50;
                  break;
               case 40:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 42:
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(43);
                  break;
               case 46:
                  jjAddStates(20, 22);
                  break;
               case 51:
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
               case 54:
                  jjCheckNAddTwoStates(54, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 22);
                  break;
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 6, 7, 45, 50, 27, 28, 30, 18, 20, 27, 28, 32, 30, 36, 37, 
   40, 37, 38, 40, 46, 47, 49, 53, 55, 10, 11, 15, 16, 21, 22, 24, 
   29, 31, 33, 
};
public static final String[] jjstrLiteralImages = {
"", "\50", "\51", "\133\135", "\162\145\144", "\142\154\141\143\153", 
"\157\146\146\145\162\145\144\133", "\135", "\141\143\143\145\160\164\145\144\133", 
"\160\162\157\166\151\144\145\144\133", "\163\157\154\166\145\144\133", "\157\146\146\145\162\133", 
"\141\143\143\145\160\164\133", "\160\162\157\166\151\144\145\133", "\163\157\154\166\145\133", 
"\162\145\157\146\146\145\162\133", "\160\154\141\171\145\162\164\162\141\156\163\133", 
"\143\157\156\146\151\147\133", "\147\141\155\145\153\151\156\144\72", 
"\164\165\162\156\144\165\162\141\164\151\157\156\72", "\155\151\156\144\145\143\162\145\155\145\156\164\72", 
"\151\156\151\164\141\143\143\72", "\157\142\152\145\143\164\151\166\145\72", 
"\160\162\145\144\151\143\141\164\145\72", "\156\165\155\162\157\165\156\144\163\72", 
"\160\162\157\146\151\164\146\141\143\164\157\162\72", "\157\164\162\157\165\156\144\163\72", "\143\157\156\164\145\170\164\133", 
"\160\154\141\171\145\162\163\160\145\143\133", "\160\141\163\163\167\144\133", "\164\145\141\155\133", 
"\162\157\165\156\144\133", "\153\151\143\153\145\144\133", "\133", "\50\156\157\144\145", "\55\76", null, 
null, null, null, null, null, null, "\164\162\165\145", "\146\141\154\163\145", null, 
null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xf780fffffffffL, 
};
static final long[] jjtoSkip = {
   0x7f000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[57];
private final int[] jjstateSet = new int[114];
protected char curChar;
public TheParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TheParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
